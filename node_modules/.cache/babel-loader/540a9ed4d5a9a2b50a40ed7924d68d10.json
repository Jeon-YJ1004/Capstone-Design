{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\capstone\\\\src\\\\components\\\\result.js\",\n    _s = $RefreshSig$();\n\n/* global kakao */\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport axios from 'axios';\nimport { Select, Card, Row, Col, Typography, Rate } from 'antd';\nimport ReactHtmlParser from 'react-html-parser'; // import CafeInfo from '../routes/info/cafe_info';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport Axios from 'axios';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nconst {\n  Title\n} = Typography;\nconst {\n  Option\n} = Select; // function SearchData(pageNumber, params, setWidth){\n//   const {place} = params\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(false);\n// //   const [latitude,setLatitude]=useState('');\n// //   const [longitude,setLongitude]=useState('');\n// //   const [cafe_id,setCafe_id]=useState('');\n//   const [data, setData] = useState([]);\n//   const [hasMore, setHasMore] = useState(false);\n//   let cancel;\n// const addData = async(e) => {\n// }\n//   useEffect(()=>{\n//     Axios.get('http://localhost:8000/api/get').then((response)=>{\n//       setData(response.data);\n//     })\n//   },[data])\n//   console.log(data)\n//   const setMap = (data) => {\n//       const container = document.getElementById(\"map\");                       \n//       const options = {\n//           center: new kakao.maps.LatLng(data[0].lat, data[0].lon),\n//           level: 5\n//       };\n//       const handleResize = () => {\n//           setWidth(window.innerWidth);\n//       }\n//       const map = new kakao.maps.Map(container, options);\n//       // 오른쪽에 지도 컨트롤 표시\n//       var zoomControl = new kakao.maps.ZoomControl();\n//       map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\n//       var bounds = new kakao.maps.LatLngBounds();    \n//       var imageSrc = \"https://1.bp.blogspot.com/-08ebwsVzqag/YSXWjBOHKPI/AAAAAAAAD9s/lRd5ya_9A2AgPtylT9oyilWIGohCTv9XQCLcBGAsYHQ/s834/dark_marker.png\";   \n//       for (var i = 0; i < data.length; i ++) {\n//           var latlng = new kakao.maps.LatLng(data[i].lat, data[i].lon)\n//           var imageSize = new kakao.maps.Size(15, 22); \n//           var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \n//           var marker = new kakao.maps.Marker({\n//               map: map,\n//               position: latlng,\n//               title : data[i].name,\n//               image : markerImage\n//           });\n//           // 마커 클릭 하면 확대\n//           kakao.maps.event.addListener(marker, 'click', function(){\n//               map.setLevel(1, {anchor: this.getPosition()});\n//           });\n//           var infowindow = new kakao.maps.InfoWindow({\n//               content: `<div class=\"infoWindow\">${data[i].name}</div>`\n//           });\n//           (function(marker, infowindow) {\n//               // 마커에 mouseover 이벤트를 등록하고 마우스 오버 시 인포윈도우를 표시합니다 \n//               kakao.maps.event.addListener(marker, 'mouseover', function() {\n//                   infowindow.open(map, marker);\n//                   var bgDiv = infowindow.a\n//                   bgDiv.style.borderColor = \"#9ba2bd\"\n//                   bgDiv.style.borderRadius = \"10px\"\n//                   bgDiv.children[1].style = \"text-align: center; width: 150px;\"\n//               });\n//               kakao.maps.event.addListener(marker, 'mouseout', function() {\n//                   infowindow.close();\n//               });\n//           })(marker, infowindow);\n//           // bounds = 모든 마커가 보이도록 지도 범위 설정\n//           bounds.extend(latlng)\n//       }\n//       map.setBounds(bounds);\n//       window.addEventListener('resize', handleResize);\n//       return () => {\n//           window.removeEventListener('resize', handleResize);\n//       }\n//   }\n//   useEffect(() => {\n//       if (pageNumber === 0){\n//           setData([])\n//       }\n//       setLoading(true);\n//       setError(false);\n//       axios({\n//           method: 'GET',\n//           url: `/cafes?searching=${place}`,\n//           params: { page: pageNumber },\n//           cancelToken: new axios.CancelToken(c => cancel = c)\n//       }).then(res => {\n//           setData(prevData => {\n//               return [... new Set([...prevData, ...res.data.content])]\n//           });\n//           if (pageNumber == 0){\n//               setMap(res.data.content)\n//           } else {\n//               setMap([... new Set([...data, ...res.data.content])])\n//           }\n//           setHasMore(res.data.content.length > 0);\n//           setLoading(false);\n//       }).catch(e => {\n//           if (axios.isCancel(e)) return\n//           setError(true)\n//       })\n//       return () => cancel()\n//   }, [pageNumber, params])\n//   return {data, loading, hasMore};\n// }\n// function Result(props){\n//   const params = props.match.params\n//   const [width, setWidth] = useState(window.innerWidth);\n//   const [pageNumber, setPageNumber] = useState(0);\n//   const { data, loading, error, hasMore } = SearchData(pageNumber, params, setWidth);\n//   useEffect(() => {\n//       setPageNumber(0)\n//   }, [params])  \n//   const changeSort = (type) => {\n//       const {place} = params\n//       props.history.push({\n//           pathname: `/search/${place}`\n//       });\n//   }\n//   const observer = useRef()\n//   const lastDataRef = useCallback(node => {\n//       if (loading) return\n//       if (observer.current) observer.current.disconnect()\n//       observer.current = new IntersectionObserver(entries => {\n//           if (entries[0].isIntersecting && hasMore){\n//               setPageNumber(prevNum => prevNum + 1)\n//           }\n//       })\n//       if (node) observer.current.observe(node)\n//   }, [loading, hasMore])\n//   const onCafeClick = (cafe) => {\n//       props.history.push({\n//         pathname: `/info/${cafe.id}`,\n//         state: { cafe },\n//       });\n//   };\n//   return (\n//     <Row>\n//         <Col span={24}>\n//         <div id=\"map\" style={{\n//             width: `${width - 200}px`,\n//             height: '40vh'\n//         }}>\n//         </div>\n//         </Col>\n//         <Col span={24}>\n//         </Col>\n//         <Col span={24} className=\"list\">\n//         {data.map((d, index) => {\n//         if (data.length === index + 1){\n//             return (\n//                 <div className=\"listItem\" key={index} ref={lastDataRef}>\n//                     <Card>\n//                         <Row>\n//                             <Col span={18}>\n//                                 {/* <div className=\"img-div\">\n//                                     <img src={d.img_path ? `http://${d.img_path}` : \"https://1.bp.blogspot.com/-ZO8wGSRzFBA/YSnWa5QV6ZI/AAAAAAAAD-Y/3n5lSJwrx-Yh3McA1GpGCg6POSjrvsPPwCLcBGAsYHQ/s800/noimage.png\"} alt={d.name} />\n//                                 </div> */}\n//                                 <div className=\"info\" onClick={() => onCafeClick(d)}>\n//                                     <Title level={2} style={{margin: 0, color: \"#dba56c\"}}>{d.name}</Title>\n//                                     <p>{d.address}</p>\n//                                 </div>\n//                             </Col>\n//                             <Col span={6}>\n//                                 <Rate allowHalf disabled defaultValue={d.star} />\n//                             </Col>\n//                         </Row>\n//                     </Card>\n//                 </div>\n//             )\n//         }\n//         else {\n//             return (\n//                 <div className=\"listItem\" key={index}>\n//                     <Card>\n//                         <Row>\n//                             <Col span={18}>\n//                                 {/* <div className=\"img-div\">\n//                                     <img src={d.img_path ? `http://${d.img_path}` : \"https://1.bp.blogspot.com/-ZO8wGSRzFBA/YSnWa5QV6ZI/AAAAAAAAD-Y/3n5lSJwrx-Yh3McA1GpGCg6POSjrvsPPwCLcBGAsYHQ/s800/noimage.png\"} alt={d.name} />\n//                                 </div> */}\n//                                 <div className=\"info\" onClick={() => onCafeClick(d)}>\n//                                     <Title level={2} style={{margin: 0, color: \"#dba56c\"}}>{d.name}</Title>\n//                                     <p>{d.address}</p>\n//                                 </div>\n//                             </Col>\n//                             <Col span={6}>\n//                                 <Rate allowHalf disabled defaultValue={d.star} />\n//                             </Col>\n//                         </Row>\n//                     </Card>\n//                 </div>\n//             )\n//         }\n//     })}\n//         </Col>\n//     </Row>\n//   )\n// }\n\nfunction Result(props) {\n  _s();\n\n  const params = props.match.params;\n  const [initData, setInitData] = useState([{\n    inputData: {\n      id: '',\n      nanme: '',\n      score: '',\n      addr: '',\n      lat: '',\n      lon: ''\n    }\n  }]); // 원활한 데이터 관리를 위해 글 갯수를 파악한다.\n\n  const [initLastIdx, setInitLastIdx] = useState(0);\n  useEffect(async () => {\n    try {\n      const res = await axios.get('/api/get');\n\n      const _inputData = await res.data.map(rowData => ( // 마지막 rowData의 idx 가 lastIdx 가 될 것이다.\n      setInitLastIdx(rowData.length()), {\n        id: rowData.id,\n        nanme: rowData.nanme,\n        score: rowData.score,\n        addr: rowData.addr,\n        lat: rowData.lat,\n        lon: rowData.lon\n      })); // initData 그릇에 concat 으로 추가해준다.\n\n\n      setInitData(initData.concat(_inputData));\n    } catch (e) {\n      console.error(e.message);\n    }\n  }, []); // initData 가 set 될 때마다 boardReducer 의 init_Data와 init_Idx 함수가 호출된다.\n\n  useEffect(() => {\n    dispatch(init_Data(initData));\n    dispatch(init_lastIdx(initLastIdx));\n  }, [initData]); //store 에 데이터 init 이후\n  // store 에 저장된 데이터 받아오기\n\n  const {\n    inputData\n  } = useSelector(state => state.boardReducer);\n  const {\n    lastIdx\n  } = useSelector(state => state.boardReducer); // 함수형 컴포넌트에서 useDispatch 를 사용하기 위해 선언\n\n  const dispatch = useDispatch(); // 특정 글 클릭되면 boardReducer의 selectRow에 dispatch\n\n  const selectContent = idx => {\n    dispatch(selectRow(idx));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: lastIdx !== 0 ? inputData.map(rowData => rowData.idx !== '' && rowData.idx !== undefined && /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"listTableIndex\",\n        onClick: () => {\n          selectContent(rowData.idx);\n        },\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/BoardContent/${rowData.idx}`,\n          children: rowData.idx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"listTableTitle\",\n        onClick: () => {\n          selectContent(rowData.idx);\n        },\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/BoardContent/${rowData.idx}`,\n          children: rowData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Result, \"bzkYuyCn9fQUZhgcDLZ1QzsIL34=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Result;\nexport default _c2 = withRouter(Result);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Result\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/project/capstone/src/components/result.js"],"names":["React","useState","useEffect","useRef","useCallback","withRouter","Link","useLocation","axios","Select","Card","Row","Col","Typography","Rate","ReactHtmlParser","useSelector","useDispatch","Axios","BrowserRouter","Router","Route","Switch","kakao","window","Title","Option","Result","props","params","match","initData","setInitData","inputData","id","nanme","score","addr","lat","lon","initLastIdx","setInitLastIdx","res","get","_inputData","data","map","rowData","length","concat","e","console","error","message","dispatch","init_Data","init_lastIdx","state","boardReducer","lastIdx","selectContent","idx","selectRow","undefined","title"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,WAA5C,QAA8D,OAA9D;AACA,SAASC,UAAT,EAAoBC,IAApB,QAA+B,kBAA/B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,UAAjC,EAA6CC,IAA7C,QAAyD,MAAzD;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAiCC,KAAjC,EAAuCC,MAAvC,QAAoD,kBAApD;;AACA,MAAM;AACJC,EAAAA;AADI,IAEFC,MAFJ;AAIA,MAAM;AAAEC,EAAAA;AAAF,IAAYZ,UAAlB;AACA,MAAM;AAAEa,EAAAA;AAAF,IAAajB,MAAnkB,MAAT,CAAgBC,KAAhB,EAAsB;AAAA;;AACpB,QAAMC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAYD,MAA3B;AACA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0B/B,QAAQ,CAAC,CAAC;AACxCgC,IAAAA,SAAS,EAAE;AACHC,MAAAA,EAAE,EAAE,EADD;AAEHC,MAAAA,KAAK,EAAE,EAFJ;AAGHC,MAAAA,KAAK,EAAE,EAHJ;AAIHC,MAAAA,IAAI,EAAE,EAJH;AAKHC,MAAAA,GAAG,EAAE,EALF;AAMHC,MAAAA,GAAG,EAAC;AAND;AAD6B,GAAD,CAAD,CAAxC,CAFoB,CAapB;;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCxC,QAAQ,CAAC,CAAD,CAA9C;AACAC,EAAAA,SAAS,CAAC,YAAW;AACjB,QAAG;AACC,YAAMwC,GAAG,GAAG,MAAMlC,KAAK,CAACmC,GAAN,CAAU,UAAV,CAAlB;;AACA,YAAMC,UAAU,GAAG,MAAMF,GAAG,CAACG,IAAJ,CAASC,GAAT,CAAcC,OAAD,MACpC;AACEN,MAAAA,cAAc,CAACM,OAAO,CAACC,MAAR,EAAD,CAAd,EACA;AACId,QAAAA,EAAE,EAACa,OAAO,CAACb,EADf;AAEIC,QAAAA,KAAK,EAACY,OAAO,CAACZ,KAFlB;AAGIC,QAAAA,KAAK,EAACW,OAAO,CAACX,KAHlB;AAIIC,QAAAA,IAAI,EAACU,OAAO,CAACV,IAJjB;AAKIC,QAAAA,GAAG,EAACS,OAAO,CAACT,GALhB;AAMIC,QAAAA,GAAG,EAACQ,OAAO,CAACR;AANhB,OAHkC,CAAb,CAAzB,CAFD,CAaC;;;AACAP,MAAAA,WAAW,CAACD,QAAQ,CAACkB,MAAT,CAAgBL,UAAhB,CAAD,CAAX;AACH,KAfD,CAeE,OAAMM,CAAN,EAAQ;AACNC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAC,CAACG,OAAhB;AACH;AACJ,GAnBQ,EAmBP,EAnBO,CAAT,CAfoB,CAoCpB;;AACAnD,EAAAA,SAAS,CAAC,MAAM;AACZoD,IAAAA,QAAQ,CAACC,SAAS,CAACxB,QAAD,CAAV,CAAR;AACAuB,IAAAA,QAAQ,CAACE,YAAY,CAAChB,WAAD,CAAb,CAAR;AACH,GAHQ,EAGN,CAACT,QAAD,CAHM,CAAT,CArCoB,CA0CpB;AACA;;AACA,QAAM;AAACE,IAAAA;AAAD,MAAcjB,WAAW,CAACyC,KAAK,IAAIA,KAAK,CAACC,YAAhB,CAA/B;AACA,QAAM;AAACC,IAAAA;AAAD,MAAY3C,WAAW,CAACyC,KAAK,IAAIA,KAAK,CAACC,YAAhB,CAA7B,CA7CoB,CA+CpB;;AACA,QAAMJ,QAAQ,GAAGrC,WAAW,EAA5B,CAhDoB,CAiDpB;;AACA,QAAM2C,aAAa,GAAIC,GAAD,IAAS;AAC3BP,IAAAA,QAAQ,CAACQ,SAAS,CAACD,GAAD,CAAV,CAAR;AACH,GAFD;;AAIA,sBACE;AAAA,cAEKF,OAAO,KAAK,CAAZ,GACG1B,SAAS,CAACa,GAAV,CAAcC,OAAO,IACjBA,OAAO,CAACc,GAAR,KAAgB,EAAhB,IAAsBd,OAAO,CAACc,GAAR,KAAgBE,SAAtC,iBACA;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,gBAAd;AAA+B,QAAA,OAAO,EAAE,MAAM;AAACH,UAAAA,aAAa,CAACb,OAAO,CAACc,GAAT,CAAb;AAA2B,SAA1E;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,iBAAgBd,OAAO,CAACc,GAAI,EAAvC;AAAA,oBAA2Cd,OAAO,CAACc;AAAnD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAI,QAAA,SAAS,EAAC,gBAAd;AAA+B,QAAA,OAAO,EAAE,MAAM;AAACD,UAAAA,aAAa,CAACb,OAAO,CAACc,GAAT,CAAb;AAA2B,SAA1E;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,iBAAgBd,OAAO,CAACc,GAAI,EAAvC;AAAA,oBAA2Cd,OAAO,CAACiB;AAAnD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,CADH,gBAYG;AAAA;AAAA;AAAA;AAAA;AAdR;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GA1EQrC,M;UA4CaX,W,EACFA,W,EAGDC,W;;;KAhDVU,M;AA4ET,qBAAetB,UAAU,CAACsB,MAAD,CAAzB","sourcesContent":["/* global kakao */\r\nimport React, {useState, useEffect, useRef, useCallback} from 'react';\r\nimport { withRouter,Link} from 'react-router-dom';\r\nimport { useLocation } from \"react-router\";\r\nimport axios from 'axios';\r\nimport { Select, Card, Row, Col, Typography, Rate } from 'antd';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n// import CafeInfo from '../routes/info/cafe_info';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Axios from 'axios';\r\nimport { BrowserRouter as Router,Route,Switch} from 'react-router-dom';\r\nconst {\r\n  kakao\r\n} = window;\r\n\r\nconst { Title } = Typography;\r\nconst { Option } = Select;\r\n\r\n\r\n// function SearchData(pageNumber, params, setWidth){\r\n//   const {place} = params\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(false);\r\n\r\n// //   const [latitude,setLatitude]=useState('');\r\n// //   const [longitude,setLongitude]=useState('');\r\n// //   const [cafe_id,setCafe_id]=useState('');\r\n  \r\n//   const [data, setData] = useState([]);\r\n//   const [hasMore, setHasMore] = useState(false);\r\n//   let cancel;\r\n\r\n// const addData = async(e) => {\r\n// }\r\n//   useEffect(()=>{\r\n//     Axios.get('http://localhost:8000/api/get').then((response)=>{\r\n//       setData(response.data);\r\n//     })\r\n//   },[data])\r\n//   console.log(data)\r\n//   const setMap = (data) => {\r\n//       const container = document.getElementById(\"map\");                       \r\n//       const options = {\r\n//           center: new kakao.maps.LatLng(data[0].lat, data[0].lon),\r\n//           level: 5\r\n//       };\r\n//       const handleResize = () => {\r\n//           setWidth(window.innerWidth);\r\n//       }\r\n//       const map = new kakao.maps.Map(container, options);\r\n  \r\n//       // 오른쪽에 지도 컨트롤 표시\r\n//       var zoomControl = new kakao.maps.ZoomControl();\r\n//       map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n\r\n//       var bounds = new kakao.maps.LatLngBounds();    \r\n//       var imageSrc = \"https://1.bp.blogspot.com/-08ebwsVzqag/YSXWjBOHKPI/AAAAAAAAD9s/lRd5ya_9A2AgPtylT9oyilWIGohCTv9XQCLcBGAsYHQ/s834/dark_marker.png\";   \r\n//       for (var i = 0; i < data.length; i ++) {\r\n//           var latlng = new kakao.maps.LatLng(data[i].lat, data[i].lon)\r\n\r\n//           var imageSize = new kakao.maps.Size(15, 22); \r\n//           var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); \r\n\r\n//           var marker = new kakao.maps.Marker({\r\n//               map: map,\r\n//               position: latlng,\r\n//               title : data[i].name,\r\n//               image : markerImage\r\n//           });\r\n\r\n//           // 마커 클릭 하면 확대\r\n//           kakao.maps.event.addListener(marker, 'click', function(){\r\n//               map.setLevel(1, {anchor: this.getPosition()});\r\n//           });\r\n\r\n//           var infowindow = new kakao.maps.InfoWindow({\r\n//               content: `<div class=\"infoWindow\">${data[i].name}</div>`\r\n//           });\r\n\r\n//           (function(marker, infowindow) {\r\n//               // 마커에 mouseover 이벤트를 등록하고 마우스 오버 시 인포윈도우를 표시합니다 \r\n//               kakao.maps.event.addListener(marker, 'mouseover', function() {\r\n//                   infowindow.open(map, marker);\r\n\r\n//                   var bgDiv = infowindow.a\r\n//                   bgDiv.style.borderColor = \"#9ba2bd\"\r\n//                   bgDiv.style.borderRadius = \"10px\"\r\n//                   bgDiv.children[1].style = \"text-align: center; width: 150px;\"\r\n//               });\r\n\r\n//               kakao.maps.event.addListener(marker, 'mouseout', function() {\r\n//                   infowindow.close();\r\n//               });\r\n//           })(marker, infowindow);\r\n\r\n//           // bounds = 모든 마커가 보이도록 지도 범위 설정\r\n//           bounds.extend(latlng)\r\n//       }\r\n//       map.setBounds(bounds);\r\n//       window.addEventListener('resize', handleResize);\r\n//       return () => {\r\n//           window.removeEventListener('resize', handleResize);\r\n//       }\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//       if (pageNumber === 0){\r\n//           setData([])\r\n//       }\r\n//       setLoading(true);\r\n//       setError(false);\r\n//       axios({\r\n//           method: 'GET',\r\n//           url: `/cafes?searching=${place}`,\r\n//           params: { page: pageNumber },\r\n//           cancelToken: new axios.CancelToken(c => cancel = c)\r\n//       }).then(res => {\r\n//           setData(prevData => {\r\n              \r\n//               return [... new Set([...prevData, ...res.data.content])]\r\n//           });\r\n//           if (pageNumber == 0){\r\n//               setMap(res.data.content)\r\n//           } else {\r\n//               setMap([... new Set([...data, ...res.data.content])])\r\n//           }\r\n//           setHasMore(res.data.content.length > 0);\r\n//           setLoading(false);\r\n//       }).catch(e => {\r\n//           if (axios.isCancel(e)) return\r\n//           setError(true)\r\n//       })\r\n//       return () => cancel()\r\n//   }, [pageNumber, params])\r\n//   return {data, loading, hasMore};\r\n// }\r\n\r\n// function Result(props){\r\n//   const params = props.match.params\r\n//   const [width, setWidth] = useState(window.innerWidth);\r\n//   const [pageNumber, setPageNumber] = useState(0);\r\n//   const { data, loading, error, hasMore } = SearchData(pageNumber, params, setWidth);\r\n\r\n//   useEffect(() => {\r\n//       setPageNumber(0)\r\n//   }, [params])  \r\n\r\n//   const changeSort = (type) => {\r\n//       const {place} = params\r\n//       props.history.push({\r\n//           pathname: `/search/${place}`\r\n//       });\r\n//   }\r\n\r\n//   const observer = useRef()\r\n//   const lastDataRef = useCallback(node => {\r\n//       if (loading) return\r\n//       if (observer.current) observer.current.disconnect()\r\n//       observer.current = new IntersectionObserver(entries => {\r\n//           if (entries[0].isIntersecting && hasMore){\r\n//               setPageNumber(prevNum => prevNum + 1)\r\n//           }\r\n//       })\r\n//       if (node) observer.current.observe(node)\r\n//   }, [loading, hasMore])\r\n\r\n//   const onCafeClick = (cafe) => {\r\n//       props.history.push({\r\n//         pathname: `/info/${cafe.id}`,\r\n//         state: { cafe },\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <Row>\r\n//         <Col span={24}>\r\n//         <div id=\"map\" style={{\r\n//             width: `${width - 200}px`,\r\n//             height: '40vh'\r\n//         }}>\r\n//         </div>\r\n//         </Col>\r\n//         <Col span={24}>\r\n//         </Col>\r\n//         <Col span={24} className=\"list\">\r\n//         {data.map((d, index) => {\r\n//         if (data.length === index + 1){\r\n//             return (\r\n//                 <div className=\"listItem\" key={index} ref={lastDataRef}>\r\n//                     <Card>\r\n//                         <Row>\r\n//                             <Col span={18}>\r\n//                                 {/* <div className=\"img-div\">\r\n//                                     <img src={d.img_path ? `http://${d.img_path}` : \"https://1.bp.blogspot.com/-ZO8wGSRzFBA/YSnWa5QV6ZI/AAAAAAAAD-Y/3n5lSJwrx-Yh3McA1GpGCg6POSjrvsPPwCLcBGAsYHQ/s800/noimage.png\"} alt={d.name} />\r\n//                                 </div> */}\r\n//                                 <div className=\"info\" onClick={() => onCafeClick(d)}>\r\n//                                     <Title level={2} style={{margin: 0, color: \"#dba56c\"}}>{d.name}</Title>\r\n//                                     <p>{d.address}</p>\r\n//                                 </div>\r\n//                             </Col>\r\n//                             <Col span={6}>\r\n//                                 <Rate allowHalf disabled defaultValue={d.star} />\r\n//                             </Col>\r\n//                         </Row>\r\n//                     </Card>\r\n//                 </div>\r\n//             )\r\n//         }\r\n//         else {\r\n//             return (\r\n//                 <div className=\"listItem\" key={index}>\r\n//                     <Card>\r\n//                         <Row>\r\n//                             <Col span={18}>\r\n//                                 {/* <div className=\"img-div\">\r\n//                                     <img src={d.img_path ? `http://${d.img_path}` : \"https://1.bp.blogspot.com/-ZO8wGSRzFBA/YSnWa5QV6ZI/AAAAAAAAD-Y/3n5lSJwrx-Yh3McA1GpGCg6POSjrvsPPwCLcBGAsYHQ/s800/noimage.png\"} alt={d.name} />\r\n//                                 </div> */}\r\n//                                 <div className=\"info\" onClick={() => onCafeClick(d)}>\r\n//                                     <Title level={2} style={{margin: 0, color: \"#dba56c\"}}>{d.name}</Title>\r\n//                                     <p>{d.address}</p>\r\n//                                 </div>\r\n//                             </Col>\r\n//                             <Col span={6}>\r\n//                                 <Rate allowHalf disabled defaultValue={d.star} />\r\n//                             </Col>\r\n//                         </Row>\r\n//                     </Card>\r\n//                 </div>\r\n//             )\r\n//         }\r\n//     })}\r\n//         </Col>\r\n//     </Row>\r\n//   )\r\n// }\r\n\r\nfunction Result(props){\r\n  const params = props.match.params;\r\n  const [initData, setInitData] = useState([{\r\n    inputData: {\r\n            id: '',\r\n            nanme: '',\r\n            score: '',\r\n            addr: '',\r\n            lat: '',\r\n            lon:''\r\n    }\r\n  }]);\r\n\r\n  // 원활한 데이터 관리를 위해 글 갯수를 파악한다.\r\n  const [initLastIdx, setInitLastIdx] = useState(0);\r\n  useEffect(async() => {\r\n      try{\r\n          const res = await axios.get('/api/get')\r\n          const _inputData = await res.data.map((rowData) => (\r\n            // 마지막 rowData의 idx 가 lastIdx 가 될 것이다.\r\n              setInitLastIdx(rowData.length()),\r\n              {\r\n                  id:rowData.id,\r\n                  nanme:rowData.nanme,\r\n                  score:rowData.score,\r\n                  addr:rowData.addr,\r\n                  lat:rowData.lat,\r\n                  lon:rowData.lon              })\r\n          )\r\n          // initData 그릇에 concat 으로 추가해준다.\r\n          setInitData(initData.concat(_inputData))\r\n      } catch(e){\r\n          console.error(e.message)\r\n      }\r\n  },[]);\r\n\r\n  // initData 가 set 될 때마다 boardReducer 의 init_Data와 init_Idx 함수가 호출된다.\r\n  useEffect(() => {\r\n      dispatch(init_Data(initData))\r\n      dispatch(init_lastIdx(initLastIdx))\r\n  }, [initData])\r\n\r\n  //store 에 데이터 init 이후\r\n  // store 에 저장된 데이터 받아오기\r\n  const {inputData} = useSelector(state => state.boardReducer)\r\n  const {lastIdx} = useSelector(state => state.boardReducer)\r\n\r\n  // 함수형 컴포넌트에서 useDispatch 를 사용하기 위해 선언\r\n  const dispatch = useDispatch();\r\n  // 특정 글 클릭되면 boardReducer의 selectRow에 dispatch\r\n  const selectContent = (idx) => {\r\n      dispatch(selectRow(idx))\r\n  }\r\n\r\n  return(\r\n    <div>\r\n\r\n        {lastIdx !== 0 ?\r\n            inputData.map(rowData => (\r\n                rowData.idx !== '' && rowData.idx !== undefined && \r\n                <tr>\r\n                    <td className='listTableIndex' onClick={() => {selectContent(rowData.idx)}}>\r\n                        <Link to={`/BoardContent/${rowData.idx}`}>{rowData.idx}</Link>\r\n                    </td>\r\n                    <td className='listTableTitle' onClick={() => {selectContent(rowData.idx)}}>\r\n                        <Link to={`/BoardContent/${rowData.idx}`}>{rowData.title}</Link>\r\n                    </td>\r\n                </tr>\r\n            )) :\r\n            <div></div>\r\n            }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default withRouter(Result)"]},"metadata":{},"sourceType":"module"}